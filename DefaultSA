Sure, here's a basic example of a Python Cloud Function using Google Cloud Functions to check which VM instances have the default service account in use:

```python
from googleapiclient import discovery
from google.auth import compute_engine

def list_instances_with_default_service_account(request):
    project_id = request.args.get('project_id')
    zone = request.args.get('zone')

    credentials = compute_engine.Credentials()
    service = discovery.build('compute', 'v1', credentials=credentials)

    instances = service.instances().list(project=project_id, zone=zone).execute()

    instances_with_default_sa = []

    if 'items' in instances:
        for instance in instances['items']:
            if 'serviceAccounts' in instance:
                for sa in instance['serviceAccounts']:
                    if 'email' in sa and sa['email'] == 'default':
                        instances_with_default_sa.append(instance['name'])

    return {'instances_with_default_sa': instances_with_default_sa}
```

This function takes project_id and zone as parameters, queries the Compute Engine API to list all VM instances in the specified project and zone, and then checks each instance to see if it's using the default service account. Finally, it returns a list of VM instance names that are using the default service account.

Make sure to deploy this Cloud Function and set up the necessary permissions for it to access the Compute Engine API. Also, consider adding error handling and additional validation as needed.
